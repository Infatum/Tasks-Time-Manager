using System;
using System.Windows;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Microsoft.Win32;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Controls;
using TasksTracker.Model.AbstractLayer;
using TasksTracker.Data;

namespace Task3.Components
{
    public class PDFGenerator
    {
        private ObservableCollection<TaskInfo> _taskForPDFGenerating;
        private IProjectDatatAccesLayer<ProjectDescription> _projectModel;
        private ITaskDataAccesLayer<TaskInfo> _taskModel;
        private int _projectID;

        public PDFGenerator(ITaskDataAccesLayer<TaskInfo> taskModel)
        {
            _taskModel = taskModel;
        }
        public PDFGenerator(IProjectDatatAccesLayer<ProjectDescription> projectModel, ITaskDataAccesLayer<TaskInfo> taskModel)
        {
            _projectModel = projectModel;
            _taskModel = taskModel;
        }
        public ICollection<TaskInfo> GetTasks(ITaskDataAccesLayer<TaskInfo> taskModel, int projectID)
        {
            var tasks =  taskModel.GetAllTasksInProjectByTaskId(projectID);
            return tasks;
        }
        /// <summary>
        /// Saves pdf report in a choosen directory on users pc
        /// </summary>
        /// <returns>PDF file name</returns>
        public string SaveFileDialog()
        {
            SaveFileDialog dlg = new SaveFileDialog();
            dlg.FileName = "Report"; //Default file name
            dlg.DefaultExt = ".pdf"; //Default file extansion
            dlg.Filter = "PDF documents (.pdf)|.*pdf"; //Filter files by extansion
            string filename = "Report";
            // Show save file dialog box
            Nullable<bool> result = dlg.ShowDialog();

            // Process save file dialog box results
            if (result == true)
            {
                // Save document
                filename = dlg.FileName;
            }
            return filename;
        }


        /// <summary>
        /// Generats a pdf file in a table maner, if freelancer mode is enabled generate pdf-file with hour rate, calculates and writes to file total summary earned in current project 
        /// </summary>
        /// <param name="name">freelancer mode (enabled/disebaled) </param>
        public void SavePDFDocument(string name, bool freelanceMode)
        {
            float earnedMoney = 0f;
            FileStream fs = new FileStream(name, FileMode.Create);
            Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            int taskCount = 1;


            document.AddAuthor("Ann Vityck");
            document.AddCreator("Generated by Pomodoro Timer");
            //document.AddSubject("Document subject - Describing the steps creating a PDF document");
            document.AddTitle("Time Report");

            //PdfTable
            if (freelanceMode)
            {
                PdfPTable table = new PdfPTable(5);
                table.TotalWidth = 400f;
                table.LockedWidth = true;
                float[] widths = new float[] { 2f, 4f, 6f, 3f, 6f };
                table.SetWidths(widths);
                table.HorizontalAlignment = 0;
                table.SpacingBefore = 20f; //leave a gap before and after the table
                table.SpacingAfter = 30f;

                PdfPCell cell = new PdfPCell(new Phrase("Tasks"));
                cell.Colspan = 3;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                table.AddCell("#");
                table.AddCell("Title");
                table.AddCell("Time");

                foreach (var taskInfo in GetTasks(_taskModel, _taskModel.ProjectID))
                {
                    string trakedTime = $"{ taskInfo.TrackedTime / 3600 }h { taskInfo.TrackedTime % 3600 / 60}m { taskInfo.TrackedTime % 60}s";
                    table.AddCell(taskCount.ToString());
                    table.AddCell(taskInfo.Name);
                    table.AddCell(trakedTime);
                    table.AddCell(taskInfo.HourRate.ToString());
                    earnedMoney += taskInfo.HourRate * (taskInfo.TrackedTime / 3600);
                    taskCount++;
                }
                table.AddCell($"Totall: {earnedMoney.ToString()}");
                document.Open();
                document.Add(table);
                document.Close();
                writer.Close();
                fs.Close();
            }
            else
            {
                PdfPTable table = new PdfPTable(3);
                table.TotalWidth = 400f;
                table.LockedWidth = true; //fix the absolute width of the table

                float[] widths = new float[] { 2f, 4f, 6f }; //relative col widths in proportions - 1/3 and 2/3
                table.SetWidths(widths);
                table.HorizontalAlignment = 0;
                table.SpacingBefore = 20f; //leave a gap before and after the table
                table.SpacingAfter = 30f;

                PdfPCell cell = new PdfPCell(new Phrase("Tasks"));
                cell.Colspan = 3;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                table.AddCell("#");
                table.AddCell("Title");
                table.AddCell("Time");

                foreach (var taskInfo in GetTasks(_taskModel, _taskModel.ProjectID))
                {
                    string trakedTime = $"{ taskInfo.TrackedTime / 3600 }h { taskInfo.TrackedTime % 3600 / 60}m { taskInfo.TrackedTime % 60}s";
                    table.AddCell(taskCount.ToString());
                    table.AddCell(taskInfo.Name);
                    table.AddCell(trakedTime);
                    taskCount++;
                }

                document.Open();
                document.Add(table);
                document.Close();
                writer.Close();
                fs.Close();
            }
        }
    }
}
