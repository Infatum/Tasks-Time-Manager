using System;
using System.Collections.Generic;
using System.Windows;
using System.Linq;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using SqlServerTypes;

namespace Task3
{

    // TODO: http://www.c-sharpcorner.com/UploadFile/013102/how-to-create-report-rdlc-in-wpf/
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        ObservableCollection<TaskBox> tasks;
        public TaskBox tb = null;
        static int taskCounter = 0;
        TaskInfoContext _db;

        public static int TaskID { get { return taskCounter; } }

        public MainWindow()
        {
            tasks = new ObservableCollection<TaskBox>();
            InitializeComponent();
            LoadTaskSessions();
            _db = new TaskInfoContext();
            taskCounter = getMaxTaskID() + 1;
        }

        private int getMaxTaskID()
        {
            var sql = "SELECT MAX(TaskBoxID) FROM TASKINFOES;";
            return _db.Database.SqlQuery<int>(sql).FirstOrDefault<int>();
        }

        private void LoadTaskSessions()
        {
            using (TaskInfoContext db = new TaskInfoContext())
            {
                var savedSessions = db.TaskDataEntities.ToList();
                foreach (TaskInfo session in savedSessions)
                {
                    tb = new TaskBox(session.TaskBoxID, session.TrackedTime, session.Name);
                    tasks.Add(tb);
                    tasksStackPanel.Children.Add(tb);
                }
            }
        }

        private void btnAddTimer_Click(object sender, RoutedEventArgs e)
        {
            tb = new TaskBox(taskCounter);
            tb.ID = taskCounter;
            tasks.Add(tb);
            tasksStackPanel.Children.Add(tb);
            taskCounter++;
        }

        private void btnAddGenerateTextReport_Click(object sender, RoutedEventArgs e)
        {
            RenderPDF();
        }

        public void RenderPDF()
        {
            FileStream fs = new FileStream("report.pdf", FileMode.Create);
            Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            int taskCount = 1;


            document.AddAuthor("Ann Vityck");
            document.AddCreator("Generated by Pomodoro Timer");
            //document.AddKeywords("PDF tutorial education");
            //document.AddSubject("Document subject - Describing the steps creating a PDF document");
            document.AddTitle("Time Report");

            //PdfTable

            PdfPTable table = new PdfPTable(3);
            table.TotalWidth = 400f;
            table.LockedWidth = true; //fix the absolute width of the table

            float[] widths = new float[] { 2f, 4f, 6f }; //relative col widths in prportions - 1/3 and 2/3
            table.SetWidths(widths);
            table.HorizontalAlignment = 0;
            table.SpacingBefore = 20f; //leave a gap before and after the table
            table.SpacingAfter = 30f;

            PdfPCell cell = new PdfPCell(new Phrase("Tasks"));
            cell.Colspan = 3;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);

            table.AddCell("#");
            table.AddCell("Title");
            table.AddCell("Time");

            foreach (var taskInfo in _db.TaskDataEntities)
            {
                string trakedTime = $"{ taskInfo.TrackedTime / 3600 }h{ taskInfo.TrackedTime % 3600 / 60}m{ taskInfo.TrackedTime % 60}s";
                table.AddCell(taskCount.ToString());
                table.AddCell(taskInfo.Name);
                table.AddCell(trakedTime);
                taskCount++;
            }

            document.Open();
            document.Add(table);
            document.Close();
            writer.Close();
            fs.Close();

        }
    }
}
